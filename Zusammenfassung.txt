		Sortieralgorithmen:

Selectionsort

https://studyflix.de/informatik/selectionsort-1323

Laufzeit: avg=min=max=O(n²) 

Algorithmus:
	Nehme erstes Element und suche nach dem kleinsten in der gesamten Liste.
	Tausche das erste element mit dem kleinsten -> Das kleinste steht nun an erster stelle

	Wiederhole für zweites element usw.

	Links vom aktuellen index ist immer sortiert, rechts unsortiert	

	Bsp: 	[7][5][2][9][4]
		[2][5][7][9][4]
		[2][4][7][9][5]
		[2][4][5][9][7]
		[2][4][5][7][9]


Insertionsort

https://studyflix.de/informatik/insertionsort-1321

Laufzeit: avg=max=O(n²)
	       min=O(n)	 

Algorithmus:
	Das erste Element gilt als Sortierter Bereich. Gehe zum zweiten element. Wenn es größer als das erste ist,
        füge es rechts davon ein, sonst links. 
	Gehe zum nächsten element und füge es an passender Stelle im sortierten bereich ein, sodass alle zahlen
	links davon kleiner und alle rechts davon größer sind.

	Bsp:	[4][7][5][3][9][1][2]
		[4][5][7][3][9][1][2]
		[3][4][5][7][9][1][2]
		[1][3][4][5][7][9][2]
		[1][2][3][4][5][7][9]


BubbleSort

https://studyflix.de/informatik/bubblesort-1325

Laufzeit: avg=max=O(n²)
	       min=O(n)	

Algorithmus:
	Nehme das erste zweierpaar. Wenn der rechte wert kleiner ist als der linke vertausche sie. Gehe einen Index weiter
	Der Linke wert ist nun der rechte vom alten paar. Wiederhole den vergleich und tausch. Gehe wieder weiter.
	Wiederhole solange bis du am ende der Liste bist. Der letzte wert ist nun der größte wert der Liste. 
	Gehe wieder zum ersten Index. Wiederhole den Durchlauf so oft bis die ganze Liste sortiert ist.
	
	--> Die sortierte Liste wächst von rechts nach links	

	Bsp:

	1. Durchlauf 	[5] [1] [4] [9] [0] [8] [6]
			[1] [5] [4] [9] [0] [8] [6]
			[1] [4] [5] [9] [0] [8] [6]
			[1] [4] [5] [9] [0] [8] [6]
			[1] [4] [5] [0] [9] [8] [6]
			[1] [4] [5] [0] [8] [9] [6]
			[1] [4] [5] [0] [8] [6] [9]

	2. Durchlauf    [1] [4] [5] [0] [8] [6] [9]
			[1] [4] [5] [0] [8] [6] [9]
			[1] [4] [5] [0] [8] [6] [9]
			[1] [4] [0] [5] [8] [6] [9]
			[1] [4] [0] [5] [8] [6] [9]
			[1] [4] [0] [5] [6] [8] [9]

	3. Durchlauf	[1] [4] [0] [5] [6] [8] [9]
			[1] [4] [0] [5] [6] [8] [9]
			[1] [0] [4] [5] [6] [8] [9]
			[1] [0] [4] [5] [6] [8] [9]
			[1] [0] [4] [5] [6] [8] [9]	

	4. Durchlauf	[1] [0] [4] [5] [6] [8] [9]
			[0] [1] [4] [5] [6] [8] [9]
			[0] [1] [4] [5] [6] [8] [9]
	
	5. Durchlauf	[0] [1] [4] [5] [6] [8] [9]
			[0] [1] [4] [5] [6] [8] [9]

	6. Durchlauf	[0] [1] [4] [5] [6] [8] [9]

	Fertig 		[0] [1] [4] [5] [6] [8] [9]


MergeSort

https://studyflix.de/informatik/mergesort-1324

Laufzeit: O(n*log(n))

Divide and Conquer: Aufteilen des Problems in kleinere Teilprobleme, welche gelößt das Gesamtproblem lösen.

Algorithmus:
	Halbiere die Liste solange bis du nur noch zweierpaare hast. Sortiere diese zweierpaare.
	Nehme dann zwei zweierpaare und mische Sie sortiert zusammen. Wiederhole diesen Schritt so oft mit jeweils größeren Paaren
	bis du eine Sortierte Liste hast.

Bsp:
	[5] [2] [4] [8] [1] [9] [7] [3] [6]
	[5] [2] [4] [8]       [1] [9] [7] [3] [6]
	[5] [2]      [4] [8]       [1] [9]      [7] [3] [6]	
	[5]     [2]      [4]    [8]       [1]     [9]      [7]     [3] [6]		
	[5]     [2]      [4]    [8]       [1]     [9]      [7]     [3]     [6]	
	[2][5]      [4][8]       [1][9]      [7]     [3][6]	
	[2][4][5][8]       [1][9]      [3][6][7]	
	[2][4][5][8]       [1][3][6][7][9]
	[1][2][3][4][5][6][7][8][9]


QuickSort

https://studyflix.de/informatik/quicksort-beispiel-1329

Laufzeit: AVG&Best: O(n*log(n)) Worst: O(n²)

Divide and Conquer Prinzip: Aufteilen des Problems in kleinere Teilprobleme, welche gelößt das Gesamtproblem lösen.

Algorithmus: 
	Wähle Pivot (oft Median) und tausche mit rechtem Element. Laufe mit einem "Zeiger" von rechts nach links und prüfe Element < PivotElement, und mit einem weiteren
	Zeiger von links nach rechts und prüfe Element > PivotElement. Tausche falls beide Fälle zutreffen die Elemente. Wenn "Zeiger" sich treffen tausche Pivot an die Stelle.
	Dann rekursiv für Liste links und Liste rechts von Pivot.

Bsp(Pivot jeweils mit Stern):

	[5][3][9][4][8*][7][2][1][6]
	[5][3][9][4][6][7][2][1][8*]	Tasuche Pivot nach rechts
	[5][3][1][4][6][7][2][9][8*]	Tausche 9 & 1 
	[5][3][1][4][6][7][2][8][9]	Tausche 9 & 8 weil Zeiger sich treffen
	[5][3][1][4*][6][7][2]   [8][9]	Suche Links ein neues Pivot (rechts ist fertig weil nur 1 Element)
	[5][3][1][2][6][7][4*]   [8][9]	Tausche Pivot nach rechts
	[2][3][1][5][6][7][4*]   [8][9]	Tausche 5 & 2
	[2][3][1][4][6][7][5]   [8][9] 	Tausche 5 & 4
	[2][3*][1]  [4]  [6][7*][5]   [8][9] 	Suche neue Pivots neben 4 
	[2][1][3*]  [4]  [6][5][7*]   [8][9]	Beide Pivots nach rechts tauschen
	[2][1]  [3]  [4]  [6][5]  [7]   [8][9]	Beide bleiben rechts weil links nichts kleiner
	[2][1*]  [3]  [4]  [6][5*]  [7]   [8][9]	Neue Pivots in den restlichen Listen suchen
	[1*][2]  [3]  [4]  [5*][6]  [7]   [8][9]	Zeiger treffen sich Pivot tauschen
	[1]  [2]  [3]  [4]  [5]  [6]  [7]  [8][9]	Weil die restlichen Listen ([2] & [6] nur ein Element haben sind die fertig)
	[1][2][3][4][5][6][7][8][9]	Done



HeapSort

https://studyflix.de/informatik/heapsort-1326
	
Laufzeit: O(n*log(n))

Algorithmus:
	Man erstellt im Array einen Max-Heap (Wurzel muss immer größer als Blätter sein). Tausche Erstes Element (Größtes und erste Wurzel) mit dem letztem (unterste Ebene
	am weitesten rechts). Letzte Position kann damit ignoriert werden da fertig sortiert. Max-Heap wiederherstellen und das gleiche nochmal.

Bsp:
	[11] | [8][6] | [3][7]  [9][2] | [15][12]  [4] 	Max-Heap erstellen
	[11] | [8][6] | [15][7]  [9][2] | [3][12]  [4] 
	[11] | [8][9] | [15][7]  [6][2] | [3][12]  [4] 
	[11] | [15][9] | [8][7]  [6][2] | [3][12]  [4] 
	[11] | [15][9] | [12][7]  [6][2] | [3][8]  [4] 
	[15] | [11][9] | [12][7]  [6][2] | [3][8]  [4] 
	[15] | [12][9] | [11][7]  [6][2] | [3][8]  [4] 
	[4] | [12][9] | [11][7]  [6][2] | [3][8]  [15] 	Letztes mit erstem Tauschen und letztes entfernen, dann wieder Max-Heap erstellen
	...


Adjazenzmatrix/Adjazenzliste:

	In einer Adjazenzmatrix kann man ablesen von welchem Knoten man zu welchem Knoten kommt. Es handelt sich um eine n x n Matrix, die einen Graph beschreibt, wo N die Menge an Knoten ist, die der
	Graph enthält. Bei einem ungerichteten Graph, sind die Wege in der Matrix kommutativ. Bei einem gerichteten Graph nicht.

	In einer Adjazenzliste werden nur die Knoten angegeben, welche man von dem jeweiligen Knoten (Spaltenzeile) erreicht.

Bäume:
	
	Traversieren von Bäumen:
		PreOrder: Es geht erst an jedem Knoten nach links und wenns nicht mehr geht rechts. 
		Bsp:
			a
		            b          c
                                           d
		= a,b,d,c
		
		InOrder: Erst komplett nach links und von da beginnt das ausgeben. 
		Bsp:
			a
		            b          c
                                           d
		= d,b,a,c
		
		PostOrder: Zuerst der linke unterknoten dann den rechten und dann den hauptknoten
		Bsp:
			a
		            b          c
                                           d
		= d,b,c,a
	



Tiefensuche (DFS (Depth First Search))

https://www.youtube.com/watch?v=Urx87-NMm6c&ab_channel=MichaelSambol
https://www.youtube.com/watch?v=RWzfvENr9oA&ab_channel=42Entwickler

	Gehe so tief wie möglich in den Baum. Fange am Hauptknoten an und nimm immer das erstbeste child. Wenn das Child kein Child mehr hat gehe solange in der Hierachie nach oben bis 
	irgendein Knoten wieder ein child hat und führe die Suche dort fort.


			a
		b		c
	d
	e
	
	Output: a,b,d,e,c	

Breitensuche (BFS (Breadth First Search) (hehe Bread))

https://www.youtube.com/watch?v=HZ5YTanv5QE&ab_channel=MichaelSambol
https://www.youtube.com/watch?v=qxiBp1EFMPI&ab_channel=42Entwickler

	Gehe immer alle Childknoten eines Baumes ab, bevor du eine Ebene tiefer gehst. Fange beim root an und lass dir alle Seiner direkten childnotes geben. Wenn du alles childnotes hast, lass die die jeweils nächste Ebene an childnotes geben.

			a
		b		c
	d				f
	e			g

	Output: a,b,c,d,f,e,g


Topologische Sortierung:

https://www.youtube.com/watch?v=4hAqEjj7IdE&ab_channel=newtutorialplace
https://www.youtube.com/watch?v=UV0ofPi4PHw&ab_channel=Mathekrieger

	Vorbedingung:
		Graph muss gerichtet sein
		Graph darf keine Zyklen enthalten


	Starte mit dem Knoten auf den Kein anderer Zeigt. Wenn mehrere Such dir einen aus. Dieser ist der erste in der liste. Dann lösche alle ausgehenden Kanten dieses Knotens.
	Suche dir dann wieder einen Knoten aus auf den keine Kante zeigt und wiederhole bis alle Knoten abgearbeitet wurden.


	
EulerKreis 
	Ein Graph wo der Startknoten der endknoten ist und jede Kante nur einmal verwendet wird.

	Finden:
	Einen großen Rundweg finden und auf dem Weg alle Subzyklen abklappern
	https://www.youtube.com/watch?v=aAKDDW4gUGs&ab_channel=Weitz%2FHAWHamburg

Hamiltonkreis
	Ein Graph wo der Startknoten der Endknoten ist und alle Knoten einmal durchlaufen werden, welche Kanten hier benutzt werden ist egal.

	



Abstände in Netzwerken 

Dijkstra Algorithmus 

	https://www.youtube.com/watch?v=KiOso3VE-vI&ab_channel=FlorianDalwigk

	Erstelle eine Tabelle. Diese Tabelle hat 3 Spalten: Knoten, Kosten und Vorgänger. In der Knotenspalte bekommt jeder Knoten eine Zeile. ... IDK guck das video

Bellmann Algorithmus
	
	https://studyflix.de/informatik/bellman-ford-algorithmus-1294

	Startknoten auswählen und setze dessen Distanz auf 0. 
	
Prim Algorithmus
	
	https://studyflix.de/informatik/bellman-ford-algorithmus-1294

	Minimalgerüst Berechnung. Zuerst beliebigen Startknoten nehmen. Dann die Kante die am wenigsten Kostet behalten und von dem neuen Knoten und alten gucken welcher der günstigste ist und immer die behalten, bis alle Knoten
	verbunden sind.
	Greedy Algorithmus, weil er nur lokal beste Kanten nimmt.

Kruskal Algorithmus

	https://studyflix.de/informatik/kruskal-algorithmus-1292

	Sortieren der Kanten aufsteigend nach Gewicht. Die kürzesten Kanten werden nacheinander in den Graph gepackt, ohne einen Zyklus zu verursachen.

Flussnetzwerk:	
	Maximalen Fluss finden:
	Ford Fulkerson Algorithmus
	https://www.youtube.com/watch?v=ZKEi6zf0O9g&ab_channel=FragW%C3%BCrdig
	https://www.youtube.com/watch?v=Tl90tNtKvxs&ab_channel=MichaelSambol

MinCut
	Mincut: Gerade welche quer durch den fluss geht. Die summierte Kapazität der Kanten ist ihr wert. Mincut ist die gerade mit der Kleinstmöglichen Kombination an Kanten.
	Der MinCut = der Maxfluss
	
	
Zu11.3: Keine Ahnung, nichts gefunden aber würde einfach tmpknoten einführen in die jeweils eine Kante ein und aus geht die die Kapazität vom knoten haben... oder Knoten einfach als Kanten behandeln


BiPartes Matching:
	https://www.youtube.com/watch?v=ryEpL70RB6g&ab_channel=TheMorpheusTutorials
	Linke Knoten werden mit einer QUelle verbunden und die rechten zeigen alle auf die Senke. Durch jede Leitung darf nur 1 Fließen, wenn 2 Linke oder 2 rechte verbunden sind darf nichts durch fließen. Dann Ford Fulkerson anwenden.
Ungarischer algorithmus:
	https://studyflix.de/informatik/ungarische-methode-1296
	Wenn man nach Präferenzen sortieren will ... hat der wichser mal in nem Nebensatz erwähnt.

	Mache eine Tabelle mit allen optionenziehe aus jedem wert immer 1 ab, bis du eine Null hast. Da wo zuerst null darf zuerst. Wenn du keine Null hast zeihe da weiter ab


11.4 Mach ich morgen hehe hehehe


Boyer Moore PM Algorithmus:

	Präprozessieren:
	Der BM Algorithmus ermittelt im Pattern wo die jeweiligen "Buchstaben" aus dem Alphabet als letztes aufzufinden sind. 
	Bei Pattern: "19229" wäre für den Buchstaben 9 : Index 4 und für 2 index 3 und für 1 index 0.

	Du hast ein Text und ein Pattern. z.B. Text = "51239518320" und Pattern "951".
	Du legst Text und Pattern untereinander:
	51239518320
	951
	Jetzt  vergleichst du Pattern[2] (die letzte Stelle vom Pattern) mit der Stelle im Text die drüber ist.
	2 != 1, d.h. du schaust im Pattern ob da eine 2 vorkommt.
		Falls ja: bewege das Pattern so weit nach rechts bis die 2 im Pattern unter der 2 im Text ist. 
		Falls nein: bewege das Pattern um die länge des Patterns.
	Bei uns ist nein das heißt :
	51239518320
	     951
	Wiederhole den Schritt von vorhin.
	5 != 1
		Eine 5 kommt im Pattern vor bewege also damit es matcht.
	51239518320
	       951
	1 = 1, 5 = 5, 9 = 9
	Merke Stelle wo das Pattern gematcht ist. (i = 4)

	Bewege Pattern weiter um die Länge des Patterns
	51239518320
	            951
	Wiederhole.


Knuth Morris Pratt Algorithmus:

	Präprozession:
	Bereite eine Tabelle vor. 
	j     0 1 2 3 4
	P[j] a b a b b	
	F(j) 0 0 1 2 2

	Diese zeigt wo der Präfix (a,b) im rest des Patterns zu finden ist. 
	
	Text = 415415412 Pattern = 415412

	415415412 
	415412

	Tabelle des Patterns 
	j     0 1 2 3 4 5
	P[j] 4 1 5 4 1 2	
	F(j) 0 0 0 1 2 0
	
	415415412 
	415412

	Man vergleicht j = 0 (P[0]) mit i = 0. Falls das matcht dann beide + 1. Bei einem mismatch (i = 5) geht man dahin an den index wo F(J-1) ist. das bedeutet bei uns 
	j = 2. Man vergleicht also jetzt i = 5 mit j = 2, falls es matcht geht man weiter falls nicht geht man zu F(j-1) = 0. Man geht also zum letzt bekanntem Prefix zurück. 



Hamming Distanz:
	
	Wenn 2 Strings die gleiche Laenge haben, ist die Hamming Distanz, wie an wie vielen Positionen sich der eine String vom anderen unterscheidet.

Editier Distanz:
	
	Wenn man 2 Strings x und y hat, ist die Editier Distanz die kleinste Anzahl an ein und loeschoperationen, um x in y zu ueberfuehren.
	Nimmt man dort auch die Ersetzung eines Symbols dazu ist das die Levenstein Metrik. lev(x,y)
	
	Nimmt man dazu auch noch die Vertauschung von benachbarten Symbolen ist es die Damerau Levenstein Metrik. dlev(x,y)

dlev <= lev <= edit

LEV Algorithmus:
	Eine 2D Tabelle mit n+1 * m+1. n = Laenge von Wort 1, m = Laenge von Wort 2.
	LEV(i,j) = min { LEV(i, j-1) + 1, LEV(i-1, j) + 1, oder LEV(i-1,j-1) + delta(x[i],y[j]) }
	delta vergleicht die Buchstaben, falls gleich ist es 0 falls ungleich 1. 

	Das bedeutet man fuellt die erste Zeile von 0 - m und die erste Spalte von 0 - n. 
	Danach min { Wert links neben der Zeile + 1, Wert ueber der Zeile + 1, wert oben links ueber der Stelle + 1 oder 0 }.

	Fuer dlev,lev und edit kann die Distanz in Zeit O(mn) ermittelt werden.

	MLEV Tabelle das Gleiche nur mit Teilstring Pattern in einem String suchen oder so ich checks ueberhaupt nicht. Tabelle sieht 1 zu 1 gleich aus ausser die erste
	Zeile die wird nicht von 0 - m hochgezaehlt sondern ist komplett 0.





	